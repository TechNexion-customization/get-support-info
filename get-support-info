#!/bin/bash
###############################################################################
# get-support-info: Shell script to gather system support information
# Author: John Weber (john.weber@technexion.com)
# Copyright 2021 TechNexion Ltd.
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
###############################################################################

echo -e "Getting support information...\n"

# Use tmpfs to store data
TMPDIR=/tmp/get-support-info
DATETIME=$(date -u +'%y%m%d%H%M%S')
UPTIME=$(uptime)

# Output files
DTB_FILE=dtb.tar.gz
RPM_FILE=installed-packages-rpm.txt
DPKG_FILE=installed-packages-dpkg.txt
OUTPUT_FILE=support-info.txt
DMESGFILE=dmesg.txt
DRM_LOG_FILE=drm-log.txt
KERN_CONFIG_FILE=config.gz
ARCHIVE_FILE=support-info_${DATETIME}.tar.gz

DTB_PATH=/sys/firmware/devicetree/base
DRM_DEBUG_PATH=/sys/module/drm/parameters/debug
SYSFSBASE=/sys/devices/soc0
KERN_CONFIG_PATH=/proc
ARCHIVE_PATH=${HOME}

# Do all data gathering in TMPDIR
[ -d ${TMPDIR} ] || mkdir ${TMPDIR}
cd ${TMPDIR} || echo -e "Unable to open ${TMPDIR}" exit

# Get basic system information
_UNAME=$(uname -a)
SOC_FAMILY=$(cat ${SYSFSBASE}/family)
SOC=$(cat ${SYSFSBASE}/soc_id)
SOC_REVISION=$(cat ${SYSFSBASE}/revision)
MACHINE=$(cat ${SYSFSBASE}/machine)
DATE=$(date)

# SOC die temperature
THERMAL=$(cat /sys/class/thermal/thermal_zone0/temp)
DIETEMP=$(expr ${THERMAL} / 1000)

echo -e "----------------------------------------------------" > ${OUTPUT_FILE}
echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e " Support Information Report "                         | tee -a ${OUTPUT_FILE}
echo -e " SOC: ${SOC_FAMILY} ${SOC} Revision ${SOC_REVISION}"  | tee -a ${OUTPUT_FILE}
echo -e " Machine: ${MACHINE}"                                 | tee -a ${OUTPUT_FILE}
echo -e " System date and time: ${DATE}"                       | tee -a ${OUTPUT_FILE}
echo -e " Up Time: ${UPTIME}"                                  | tee -a ${OUTPUT_FILE}
echo -e " Die temperature: ${DIETEMP} C"                       | tee -a ${OUTPUT_FILE}
echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}

echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e "uname -a output:\n ${_UNAME}" >> ${OUTPUT_FILE}

# Get OS release information if present
echo -e "Getting information from /etc/os-release if present..."
OS_RELEASE=/etc/os-release
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${OS_RELEASE} ; then
    echo -e "OS release information from ${OS_RELEASE}:" >> ${OUTPUT_FILE}
	cat ${OS_RELEASE} >> ${OUTPUT_FILE}
	echo -e "OS release information (${OS_RELEASE}) copied\n"
else
	echo -e "${OS_RELEASE} not found\n" | tee -a ${OUTPUT_FILE}
fi

# Get a list of modules installed in the kernel
_LSMOD=$(lsmod)
echo -e "Getting a list of installed kernel modules.\n"
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e "Modules installed:\n${_LSMOD}" >> ${OUTPUT_FILE}

# Copy kernel configuration file
echo "Getting a copy of the kernel configuration file..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${KERN_CONFIG_PATH}/${KERN_CONFIG_FILE} ; then
	cp  ${KERN_CONFIG_PATH}/${KERN_CONFIG_FILE} .
	echo -e "Kernel configuration file (${KERN_CONFIG_FILE}) copied" | tee -a ${OUTPUT_FILE}
else
	echo -e "No kernel configuration file found in ${KERN_CONFIG_PATH}/${KERN_CONFIG_FILE}\n" | tee -a ${OUTPUT_FILE}
fi

# Get a copy of the device tree
echo "Getting copy of device tree..."
DTC=/usr/bin/dtc
DTS_FILE=device-tree.dts
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -d ${DTB_PATH} ; then
	cd ${DTB_PATH} || echo -e "Could not cd to ${DTB_PATH}" exit
	tar czf ${TMPDIR}/${DTB_FILE} .
	cd ${TMPDIR} || echo -e "Could not cd to ${TMPDIR}" exit
	echo -e "Device tree copied to ${DTB_FILE}" | tee -a ${OUTPUT_FILE}

	# If we have DTC installed then try to make a dts, to make this easier
	echo "Checking to see if we have dtc installed..."

	echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}
	if test -f ${DTC} ; then
		echo -e "${DTC} is installed. Making a dts."
		${DTC} -qqq -f -I fs -O dts ${DTB_PATH} -o ${DTS_FILE}
		echo -e "Device tree source file made and located in (${DTS_FILE})" | tee -a ${OUTPUT_FILE}
	else
		echo -e "${DTC} is not installed. Device tree directory can be decompiled with dtc on host" | tee -a ${OUTPUT_FILE}
	fi
else
	echo -e "Device tree firmware not found at ${DTB_PATH}" | tee -a ${OUTPUT_FILE}
fi

# Get a list of installed packages, if an RPM package manager is installed
echo "Getting list of RPM installed packages..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f /usr/bin/rpm ; then
	echo "...RPM archive file manager is present"

	# Get a list of installed packages
	RPM_FILES=$(rpm -qa --qf '(%{INSTALLTIME:date}): %{NAME}-%{VERSION}\n')

	if [[ $? != 0 ]]; then
		echo -e "rpm command failed" | tee -a ${OUTPUT_FILE}
	elif [[ $RPM_FILES ]]; then
		echo "${RPM_FILES}" > $RPM_FILE
		echo -e "List of RPM packages installed is in ${RPM_FILE}" | tee -a ${OUTPUT_FILE}
	else
		echo -e "No RPM packages installed." | tee -a ${RPM_FILE}
	fi
else
	echo -e "RPM archive file manager not present" | tee -a ${OUTPUT_FILE}
fi

# Get a list of installed archive files, if a package manager is installed
echo "Getting list of installed packages..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f /usr/bin/dpkg-query ; then
	echo "...Debian package manager is present"

	# Get a list of installed DPKG packages
	DPKG_FILES=$(dpkg-query -f '${binary:Package} : ${version} \n' -W)

	if [[ $? != 0 ]]; then
		echo -e "dpkg-query command failed" | tee -a ${OUTPUT_FILE}
	elif [[ $DPKG_FILES ]]; then
		echo "$DPKG_FILES" > $DPKG_FILE
		echo -e "List of DPKG packages installed is in ${DPKG_FILE}" | tee -a ${OUTPUT_FILE}
	else
		echo -e "No DPKG packages installed." | tee -a ${DPKG_FILE}
	fi

else
	echo -e "Debian package manager not present" | tee -a ${OUTPUT_FILE}
fi

echo "Getting logs..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
dmesg -kuxS --level=emerg,alert,crit,err,warn,notice,info,debug > ${DMESGFILE}
echo -e "dmesg log stored in ${DMESGFILE}" | tee -a ${OUTPUT_FILE}

#
# DRM
#

echo "Getting DRM log, if DRM is present..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}

if test -f $DRM_DEBUG_PATH ; then

	echo "...$DRM_DEBUG_PATH is present, so enable DRM debugging."
	echo
	echo "  DRM debugging is useful for helping diagnose display problems,"
	echo "  but can log a lot of messages which eventually may fill up the"
	echo "  kernel ring buffer. This script will leave DRM debugging enabled so"
	echo "  that more log data can be gathered. To turn this off, run:"
	echo
	echo "    echo 0x0 > $DRM_DEBUG_PATH"
	echo

	# Turn on DRM debugging info
	echo 0xf > $DRM_DEBUG_PATH

	# Grab the DRM log. This is a normal dmesg, but we filter for drm only
	dmesg -kuxS --level=emerg,alert,crit,err,warn,notice,info,debug | grep drm > ${DRM_LOG_FILE}
	echo -e "drm log stored in ${DRM_LOG_FILE}" | tee -a ${OUTPUT_FILE}

else
	echo -e "$DRM_DEBUG_PATH is not present" | tee -a ${OUTPUT_FILE}
	echo -e "DRM not present on system" | tee -a ${DRM_LOG_FILE}
fi

echo -e "Getting internet connection information..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
_IFCONFIG=$(ifconfig -a)
echo -e "Internet connections:\n${_IFCONFIG}\n\n" >> ${OUTPUT_FILE}

echo -e "Getting wireless radio information..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
_WLAN_TEMP=$(iwpriv wlan0 get_temp)
echo -e "Wireless radio information:\n${_WLAN_TEMP}\n\n" >> ${OUTPUT_FILE}

echo -e "Getting Bluetooth configuration information..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
_HCICONFIG=$(hciconfig -a)
echo -e "BT configuration:\n${_HCICONFIG}\n\n" >> ${OUTPUT_FILE}

echo -e "Getting information from debugfs, if present..."
DEBUGFS_PATH=/sys/kernel/debug
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -d ${DEBUGFS_PATH} ; then
	echo -e "Kernel debugfs is present"
	echo -e "Selected kernel debugfs information\n" >> ${OUTPUT_FILE}
	echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}
	echo -e "Clock summary: " >> ${OUTPUT_FILE}
	cat ${DEBUGFS_PATH}/clk/clk_summary >> ${OUTPUT_FILE}
	echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}
	echo -e "MMC information: " >> ${OUTPUT_FILE}
	if test -d ${DEBUGFS_PATH}/mmc0 ; then
		echo -e "MMC0:" >> ${OUTPUT_FILE}
		cat ${DEBUGFS_PATH}/mmc0/ios >> ${OUTPUT_FILE}
	fi
	if test -d ${DEBUGFS_PATH}/mmc1 ; then
		echo -e "MMC1:" >> ${OUTPUT_FILE}
		cat ${DEBUGFS_PATH}/mmc1/ios >> ${OUTPUT_FILE}
	fi
	if test -d ${DEBUGFS_PATH}/mmc2 ; then
		echo -e "MMC2:" >> ${OUTPUT_FILE}
		cat ${DEBUGFS_PATH}/mmc2/ios >> ${OUTPUT_FILE}
	fi
else
	echo -e "Kernel debugfs is not present"
fi

echo -e "Getting interrupt information, if present..."
INTERRUPTS_FILE=/proc/interrupts
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${INTERRUPTS_FILE} ; then
	echo -e "${INTERRUPTS_FILE} is present"
	echo -e "${INTERRUPTS_FILE} contents: \n" >> ${OUTPUT_FILE}
	cat ${INTERRUPTS_FILE} >> ${OUTPUT_FILE}
else
	echo -e "${INTERRUPTS_FILE} is not present"
fi

echo -e "Getting devices..."
DEVICES_FILE=/proc/devices
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${DEVICES_FILE} ; then
	echo -e "${DEVICES_FILE} is present"
	echo -e "${DEVICES_FILE} contents: \n" >> ${OUTPUT_FILE}
	cat ${DEVICES_FILE} >> ${OUTPUT_FILE}
else
	echo -e "${DEVICES_FILE} is not present"
fi

echo -e "Getting output of i2cdetect..."
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e "Output of i2c_detect for all i2c masters:" >> ${OUTPUT_FILE}
for file in /dev/i2c-*
do
	_I2CDETECT_CMD=$(i2cdetect -y "${file: -1}")
	echo -e "Device: ${file}:\n${_I2CDETECT_CMD}\n" >> ${OUTPUT_FILE}
done

echo -e "Getting a list of active processes..."
PS_CMD=/bin/ps
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${PS_CMD} ; then
	echo -e "${PS_CMD} is present"
	echo -e "Active processess \n" >> ${OUTPUT_FILE}
	${PS_CMD} -efHl >> ${OUTPUT_FILE}
else
	echo -e "${PS_CMD} is not present"
fi

echo -e "Getting process utilization and load averages..."
TOP_CMD=/usr/bin/top
echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
if test -f ${TOP_CMD} ; then
	echo -e "${TOP_CMD} is present"
	echo -e "Top command output \n" >> ${OUTPUT_FILE}
	${TOP_CMD} -b -n 1 -d 1 -c -w 512 -HS >> ${OUTPUT_FILE}
else
	echo -e "${TOP_CMD} is not present"
fi

echo -e "\n----------------------------------------------------" >> ${OUTPUT_FILE}
echo -e "END REPORT" >> ${OUTPUT_FILE}
echo -e "----------------------------------------------------" >> ${OUTPUT_FILE}

echo -e "Packing all in archive"
tar czf "${ARCHIVE_PATH}/${ARCHIVE_FILE}" ${OUTPUT_FILE} ${DMESGFILE} ${RPM_FILE} ${DPKG_FILE} ${DTB_FILE} ${DTS_FILE} ${KERN_CONFIG_FILE} ${DRM_LOG_FILE}

echo -e "System information located in ${ARCHIVE_PATH}/${ARCHIVE_FILE}"
